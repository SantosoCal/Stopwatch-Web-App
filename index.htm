<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8"> 
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
        <script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.11.0/bootstrap-table.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    </head>
    <body>
        <h1 align="center">Stopwatch</h1>
        <p align="center">By Andrew Santoso</p>
        <div id="time" style="text-align: center;margin-bottom: 10px; font-size: 400%">00:00:00.000</div>
        <div style="text-align: center;">
            <button id="startBtn" class="btn btn-primary">Start the clock</button>
            <button id="stopBtn" class="btn btn-danger" disabled="true">Stop the clock</button>
            <button id="resetBtn" class="btn btn-danger">Reset</button>
        </div> 
        <div class="container">
            <h2>Times</h2>
            <h4 id="errorMsg"></h4>            
            <table class="table table-hover" id="timeTable">
                <thead>
                    <tr>
                        <th>Entry</th>
                        <th>Time</th>
                        <th>Time Elapsed</th>
                        <th>Timezone</th>
                        <th>Latitude</th>
                        <th>Longitude</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>

        <script>
            window.onload = function() {
                startBtn = document.getElementById("startBtn");
                stopBtn = document.getElementById("stopBtn");
                resetBtn = document.getElementById("resetBtn");
                hitStart = false;
                stopWatch();

                // builds the table from local storage if there are already values in the table.
                buildTable();
            }
        </script>

        <script>

            var timeBegan = null;
            var timeStopped = null;
            var stoppedDuration = 0;
            var started = null;
            var timeStopped;

            // true when user hits start button, false otherwise
            var startPressed;

            // set immediately when user hits start/stop - more accurate than setting time elapsed after
            // geolocation completes fetching, since that can take a while
            var currentTimeElapsed;

            var currentTime;
            var timeElapsed;
            var elapsedHour;
            var elapsedMin;
            var elapsedSec;
            var elapsedMs;

            let startBtn;
            let stopBtn;
            let resetBtn;

            function stopWatch() {

                startBtn.addEventListener("click", function () {
                    startBtn.disabled = true;
                    stopBtn.disabled = false;
                    if (timeBegan === null) {
                        timeBegan = new Date();
                    }
                    if (timeStopped !== null) {
                        stoppedDuration += (new Date() - timeStopped);
                    }
                    console.log(stoppedDuration);
                    if (currentTimeElapsed === null) {
                        currentTimeElapsed = "00:00:00.000"
                    } else {
                        currentTimeElapsed = getTimeElapsed();
                    }
                    started = setInterval(clockRunning, 10);
                    startPressed = true;
                    geoFindMe();
                });

                stopBtn.addEventListener("click", function () {
                    startBtn.disabled = false;
                    stopBtn.disabled = true;
                    startPressed = false;
                    currentTimeElapsed = getTimeElapsed();
                    timeStopped = new Date();
                    geoFindMe();
                });

                resetBtn.addEventListener("click", function () {
                    localStorage.clear();
                    clearTable();
                    clearInterval(started);
                    stoppedDuration = 0;
                    timeBegan = null;
                    timeStopped = null;
                    currentTimeElapsed = null;
                    startBtn.disabled = false;
                    stopBtn.disabled = true;
                    document.getElementById("time").innerHTML = "00:00:00.000";
                    localStorage.setItem("lapCount", 1);
                });

                function clockRunning(){
                    currentTime = new Date();
                    timeElapsed = new Date(currentTime - timeBegan - stoppedDuration);
                    elapsedHour = timeElapsed.getUTCHours();
                    elapsedMin = timeElapsed.getUTCMinutes();
                    elapsedSec = timeElapsed.getUTCSeconds();
                    elapsedMs = timeElapsed.getUTCMilliseconds();
                    document.getElementById("time").innerHTML = getTimeElapsed();
                };

            }

            function getTimeElapsed() {
                return (elapsedHour > 9 ? elapsedHour : "0" + elapsedHour) + ":" + 
                    (elapsedMin > 9 ? elapsedMin : "0" + elapsedMin) + ":" + 
                    (elapsedSec > 9 ? elapsedSec : "0" + elapsedSec) + "." + 
                    (elapsedMs > 99 ? elapsedMs : elapsedMs > 9 ? "0" + elapsedMs : "00" + elapsedMs);
            }

            function getCurrentTime() {
                var d = new Date();
                var hour = d.getHours();
                var min = d.getMinutes();
                var sec = d.getSeconds();
                return hour + ":" + (min > 9 ? min : "0" + min) + ":" + (sec > 9 ? sec : "0" + sec);
            }

            function buildTable() {
                if (localStorage.getItem("tableJSON") != null) {
                    console.log("tableJSON ISNt NULL")
                    var myjson = JSON.parse(localStorage.getItem("tableJSON"));
                    for (var i = 0; i < myjson.length; i++) {
                        addRowToTable(myjson[i]);
                    }
                }
            }

            function addRowToTable(newJson) {
                console.log(newJson)
                var row = $("<tr><td>" + newJson.lapCount +
                            "</td><td>" + newJson.Time +  
                            "</td><td>" + newJson.TimeElapsed + 
                            "</td><td>" + newJson.Timezone + 
                            "</td><td>" + newJson.Latitude + 
                            "</td><td>" + newJson.Longitude + 
                            "</td></tr>");
                $("#timeTable > tbody").append(row);
            }

            function clearTable() {
                var count = document.getElementById("timeTable").rows.length;
                console.log(count);
                for (i = 0; i < count - 1; i++) {
                    document.getElementById("timeTable").deleteRow(1);
                }
            }

            function makeJson(latitude, longitude) {

                // if this is the first entry in the table, initialize lapCount in local storage
                if (localStorage.getItem("lapCount") === null) {
                    console.log("setting lapCount to 1")
                    localStorage.setItem("lapCount", 1);
                }

                var newJson = {
                    "lapCount": localStorage.getItem("lapCount"),
                    "Time": getCurrentTime(),
                    "TimeElapsed": currentTimeElapsed,
                    "Timezone": Intl.DateTimeFormat().resolvedOptions().timeZone,
                    "Latitude": latitude.toString(),
                    "Longitude": longitude.toString()
                };
                return newJson
            }

            function geoFindMe() {

                var errorMsg = document.getElementById("errorMsg");

                if (!navigator.geolocation){
                    errorMsg.innerHTML = "<h4>Geolocation is not supported by your browser</h4>";
                    return;
                }

                function updateLocalStorage(newJson) {

                    if (localStorage.getItem("tableJSON") === null) {
                        localStorage.setItem("tableJSON", JSON.stringify([newJson]));
                    } else { 
                        var jsonFromTable = JSON.parse(localStorage.getItem("tableJSON"));
                        jsonFromTable.push(newJson);
                        localStorage.setItem("tableJSON", JSON.stringify(jsonFromTable));
                    }

                    if (startPressed === false) {                        
                        timeStopped = new Date();
                        clearInterval(started);
                    }

                    var prevLapCount = parseInt(localStorage.getItem("lapCount"));
                    console.log(prevLapCount)
                    localStorage.setItem("lapCount", prevLapCount + 1);
                }

                function success(position) {
                    latitude  = position.coords.latitude;
                    longitude = position.coords.longitude;
                    var newJson = makeJson(latitude, longitude);
                    addRowToTable(newJson);
                    updateLocalStorage(newJson);
                }

                function error() {
                    var newJson = makeJson("Error", "Error");
                    addRowToTable(newJson);
                    updateLocalStorage(newJson);
                }

                console.log("getting current position");
                navigator.geolocation.getCurrentPosition(success, error, {timeout:5000});

            }

            function storageAvailable(type) {
                try {
                    var storage = window[type],
                        x = '__storage_test__';
                    storage.setItem(x, x);
                    storage.removeItem(x);
                    return true;
                }
                catch(e) {
                    return e instanceof DOMException && (
                        // everything except Firefox
                        e.code === 22 ||
                        // Firefox
                        e.code === 1014 ||
                        // test name field too, because code might not be present
                        // everything except Firefox
                        e.name === 'QuotaExceededError' ||
                        // Firefox
                        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&
                        // acknowledge QuotaExceededError only if there's something already stored
                        storage.length !== 0;
                }
            }

        </script>

    </body>
</html>